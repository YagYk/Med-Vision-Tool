import streamlit as st
import cv2
import numpy as np
from PIL import Image
import os
from datetime import datetime
import json
from pathlib import Path

from models.classifier import ImageClassifier
from models.genai_helper import GeminiHelper
from utils.image_processing import preprocess_image, draw_anomalies
from utils.report_generator import generate_report
from config import GEMINI_API_KEY

def main():
    # Set page config
    st.set_page_config(
        page_title="Medical Vision Tool",
        page_icon="ЁЯПе",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # Load translations
    def load_translations():
        translations = {
            "en": {
                "title": "Medical Vision Diagnostic Tool",
                "subtitle": "AI-Powered Medical Image Analysis",
                "upload_text": "Upload Medical Image",
                "patient_info": "Patient Information",
                "name": "Patient Name",
                "age": "Age",
                "gender": "Gender",
                "village": "Village",
                "district": "District",
                "state": "State",
                "analyze": "Analyze Image",
                "save_report": "Save Report",
                "loading": "Analyzing image...",
                "error": "Error",
                "success": "Success",
                "report_saved": "Report saved successfully!",
                "select_language": "Select Language",
                "gender_options": ["Male", "Female", "Other"],
                "analysis_results": "Analysis Results",
                "recommendations": "Recommendations",
                "medical_advice": "Medical Advice",
                "contact_doctor": "Please contact a doctor for detailed examination",
                "emergency_contact": "Emergency Contact",
                "phone": "Phone Number",
                "address": "Address",
                "save_patient": "Save Patient Information",
                "clear": "Clear Form",
                "upload_help": "Supported formats: JPG, JPEG, PNG, BMP",
                "patient_history": "Patient History",
                "no_history": "No previous records found",
                "new_analysis": "New Analysis",
                "previous_analyses": "Previous Analyses"
            },
            "hi": {
                "title": "рдЪрд┐рдХрд┐рддреНрд╕рд╛ рджреГрд╖реНрдЯрд┐ рдиреИрджрд╛рдирд┐рдХ рдЙрдкрдХрд░рдг",
                "subtitle": "рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЫрд╡рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
                "upload_text": "рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
                "patient_info": "рд░реЛрдЧреА рдХреА рдЬрд╛рдирдХрд╛рд░реА",
                "name": "рд░реЛрдЧреА рдХрд╛ рдирд╛рдо",
                "age": "рдЖрдпреБ",
                "gender": "рд▓рд┐рдВрдЧ",
                "village": "рдЧрд╛рдБрд╡",
                "district": "рдЬрд┐рд▓рд╛",
                "state": "рд░рд╛рдЬреНрдп",
                "analyze": "рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ",
                "save_report": "рд░рд┐рдкреЛрд░реНрдЯ рд╕рд╣реЗрдЬреЗрдВ",
                "loading": "рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░ рд░рд╣рд╛ рд╣реИ...",
                "error": "рддреНрд░реБрдЯрд┐",
                "success": "рд╕рдлрд▓",
                "report_saved": "рд░рд┐рдкреЛрд░реНрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕рд╣реЗрдЬреА рдЧрдИ!",
                "select_language": "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
                "gender_options": ["рдкреБрд░реБрд╖", "рдорд╣рд┐рд▓рд╛", "рдЕрдиреНрдп"],
                "analysis_results": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо",
                "recommendations": "рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ",
                "medical_advice": "рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд▓рд╛рд╣",
                "contact_doctor": "рд╡рд┐рд╕реНрддреГрдд рдЬрд╛рдВрдЪ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ",
                "emergency_contact": "рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рдВрдкрд░реНрдХ",
                "phone": "рдлреЛрди рдирдВрдмрд░",
                "address": "рдкрддрд╛",
                "save_patient": "рд░реЛрдЧреА рдХреА рдЬрд╛рдирдХрд╛рд░реА рд╕рд╣реЗрдЬреЗрдВ",
                "clear": "рдлреЙрд░реНрдо рд╕рд╛рдлрд╝ рдХрд░реЗрдВ",
                "upload_help": "рд╕рдорд░реНрдерд┐рдд рдкреНрд░рд╛рд░реВрдк: JPG, JPEG, PNG, BMP",
                "patient_history": "рд░реЛрдЧреА рдХрд╛ рдЗрддрд┐рд╣рд╛рд╕",
                "no_history": "рдХреЛрдИ рдкрд┐рдЫрд▓рд╛ рд░рд┐рдХреЙрд░реНрдб рдирд╣реАрдВ рдорд┐рд▓рд╛",
                "new_analysis": "рдирдпрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
                "previous_analyses": "рдкрд┐рдЫрд▓реЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг"
            },
            "ta": {
                "title": "рооро░рпБродрпНродрпБро╡ рокро╛ро░рпНро╡рпИ роирпЛропро▒ро┐родро▓рпН роХро░рпБро╡ро┐",
                "subtitle": "роПроР-роЖродро╛ро░рооро╛рой рооро░рпБродрпНродрпБро╡ рокроЯроХрпНроХро╛роЯрпНроЪро┐роХро│рпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ",
                "upload_text": "рооро░рпБродрпНродрпБро╡рокрпН рокроЯроорпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН",
                "patient_info": "роирпЛропро╛ро│ро┐ропро┐ройрпН родроХро╡ро▓рпНроХро│рпН",
                "name": "роирпЛропро╛ро│ро┐ропро┐ройрпН рокрпЖропро░рпН",
                "age": "ро╡ропродрпБ",
                "gender": "рокро╛ро▓ро┐ройроорпН",
                "village": "роХро┐ро░ро╛роороорпН",
                "district": "рооро╛ро╡роЯрпНроЯроорпН",
                "state": "рооро╛роиро┐ро▓роорпН",
                "analyze": "рокроЯродрпНродрпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН",
                "save_report": "роЕро▒ро┐роХрпНроХрпИропрпИ роЪрпЗрооро┐роХрпНроХро╡рпБроорпН",
                "loading": "рокроЯродрпНродрпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНроХро┐ро▒родрпБ...",
                "error": "рокро┐ро┤рпИ",
                "success": "ро╡рпЖро▒рпНро▒ро┐",
                "report_saved": "роЕро▒ро┐роХрпНроХрпИ ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ!",
                "select_language": "роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
                "gender_options": ["роЖрогрпН", "рокрпЖрогрпН", "рооро▒рпНро▒ро╡рпИ"],
                "analysis_results": "рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роорпБроЯро┐ро╡рпБроХро│рпН",
                "recommendations": "рокро░ро┐роирпНродрпБро░рпИроХро│рпН",
                "medical_advice": "рооро░рпБродрпНродрпБро╡ роЖро▓рпЛроЪройрпИ",
            "contact_doctor": "ро╡ро┐ро░ро┐ро╡ро╛рой рокро░ро┐роЪрпЛродройрпИроХрпНроХрпБ рооро░рпБродрпНродрпБро╡ро░рпИ роЕрогрпБроХро╡рпБроорпН",
            "emergency_contact": "роЕро╡роЪро░ родрпКроЯро░рпНрокрпБ",
            "phone": "родрпКро▓рпИрокрпЗроЪро┐ роОрогрпН",
            "address": "роорпБроХро╡ро░ро┐",
            "save_patient": "роирпЛропро╛ро│ро┐ропро┐ройрпН родроХро╡ро▓рпНроХро│рпИ роЪрпЗрооро┐роХрпНроХро╡рпБроорпН",
            "clear": "рокроЯро┐ро╡родрпНродрпИ роЕро┤ро┐роХрпНроХро╡рпБроорпН",
            "upload_help": "роЖродро░ро┐роХрпНроХрокрпНрокроЯрпБроорпН ро╡роЯро┐ро╡роЩрпНроХро│рпН: JPG, JPEG, PNG, BMP",
            "patient_history": "роирпЛропро╛ро│ро┐ропро┐ройрпН ро╡ро░ро▓ро╛ро▒рпБ",
            "no_history": "роорпБроирпНродрпИроп рокродро┐ро╡рпБроХро│рпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ",
            "new_analysis": "рокрпБродро┐роп рокроХрпБрокрпНрокро╛ропрпНро╡рпБ",
            "previous_analyses": "роорпБроирпНродрпИроп рокроХрпБрокрпНрокро╛ропрпНро╡рпБроХро│рпН"
            }
        }
        return translations

    # Initialize session state
    if 'language' not in st.session_state:
        st.session_state.language = 'en'
    if 'patient_data' not in st.session_state:
        st.session_state.patient_data = {}
    if 'analysis_history' not in st.session_state:
        st.session_state.analysis_history = []

    # Load translations
    translations = load_translations()
    t = translations[st.session_state.language]

    # Sidebar
    with st.sidebar:
        st.title(t["select_language"])
        language = st.radio("", ["English", "рд╣рд┐рдВрджреА", "родрооро┐ро┤рпН"], 
                            index=0 if st.session_state.language == 'en' else 1 if st.session_state.language == 'hi' else 2)
        if language == "English":
            st.session_state.language = 'en'
        elif language == "рд╣рд┐рдВрджреА":
            st.session_state.language = 'hi'
        else:
            st.session_state.language = 'ta'
        t = translations[st.session_state.language]

    # Main content
    st.title(t["title"])
    st.subheader(t["subtitle"])

    # Create tabs
    tab1, tab2 = st.tabs([t["new_analysis"], t["previous_analyses"]])

    with tab1:
        # Patient Information Form
        st.header(t["patient_info"])
        col1, col2 = st.columns(2)
        
        with col1:
            patient_name = st.text_input(t["name"], key="patient_name")
            age = st.number_input(t["age"], min_value=1, max_value=120, key="age")
            gender = st.selectbox(t["gender"], t["gender_options"], key="gender")
            village = st.text_input(t["village"], key="village")
        
        with col2:
            district = st.text_input(t["district"], key="district")
            state = st.text_input(t["state"], key="state")
            phone = st.text_input(t["phone"], key="phone")
            address = st.text_area(t["address"], key="address")
        
        # Emergency Contact
        st.subheader(t["emergency_contact"])
        emergency_phone = st.text_input(t["phone"], key="emergency_phone")
        
        # Image Upload
        st.header(t["upload_text"])
        st.info(t["upload_help"])
        uploaded_file = st.file_uploader("", type=["jpg", "jpeg", "png", "bmp"], key="image_uploader")
        
        if uploaded_file is not None:
            # Display uploaded image
            image = Image.open(uploaded_file)
            st.image(image, caption="Uploaded Image", use_column_width=True)
            
            if st.button(t["analyze"], key="analyze_button"):
                with st.spinner(t["loading"]):
                    try:
                        # Save uploaded file temporarily
                        temp_path = f"temp_{uploaded_file.name}"
                        with open(temp_path, "wb") as f:
                            f.write(uploaded_file.getvalue())
                        
                        # Initialize models
                        classifier = ImageClassifier()
                        genai_helper = GeminiHelper()
                        
                        # Process image
                        preprocessed = preprocess_image(temp_path)
                        cv_results = classifier.detect_anomalies(preprocessed)
                        genai_results = genai_helper.analyze_medical_image(temp_path, cv_results, language=st.session_state.language)

                        
                        # Generate report
                        report = generate_report(temp_path, cv_results, genai_results)
                        
                        # Store analysis in history
                        analysis_record = {
                            "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
                            "patient_name": patient_name,
                            "report": report,
                            "image_path": temp_path
                        }
                        st.session_state.analysis_history.append(analysis_record)
                        
                        # Display results
                        st.success(t["success"])
                        st.markdown(report)
                        
                        # Save report button
                        if st.button(t["save_report"], key="save_report_button"):
                            # Create reports directory if it doesn't exist
                            reports_dir = Path("reports")
                            reports_dir.mkdir(exist_ok=True)
                            
                            # Save report
                            report_path = reports_dir / f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                            with open(report_path, "w", encoding="utf-8") as f:
                                f.write(report)
                            st.success(t["report_saved"])
                        
                    except Exception as e:
                        st.error(f"{t['error']}: {str(e)}")
                    finally:
                        # Clean up temporary file
                        if os.path.exists(temp_path):
                            os.remove(temp_path)

    with tab2:
        # Display analysis history
        if not st.session_state.analysis_history:
            st.info(t["no_history"])
        else:
            for record in reversed(st.session_state.analysis_history):
                with st.expander(f"{record['date']} - {record['patient_name']}"):
                    st.markdown(record["report"])
                    if os.path.exists(record["image_path"]):
                        st.image(record["image_path"], caption="Analyzed Image", use_column_width=True)

    # Footer
    st.markdown("---")
    st.markdown("Made with тЭдя╕П for rural healthcare")

if __name__ == "__main__":
    main() 
